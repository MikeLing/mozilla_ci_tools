#!/usr/bin/env python
"""
This module helps with the buildjson data generated by the Release Engineering
systems: http://builddata.pub.build.mozilla.org/builddata/buildjson
"""
import logging
import os

from mozci.utils.tzone import utc_dt, utc_time, utc_day
from mozci.utils.transfer import load_file, path_to_file

LOG = logging.getLogger('mozci')

SELFSERVE = "https://secure.pub.build.mozilla.org/buildapi/self-serve"
BUILDJSON_DATA = "http://builddata.pub.build.mozilla.org/builddata/buildjson"
BUILDS_4HR_FILE = "builds-4hr.js"
BUILDS_DAY_FILE = "builds-%s.js"

# This helps us read into memory and load less from disk
BUILDS_CACHE = {}


def fetch_by_date(date):
    """ Helper method to download a buildjson file by providing a date."""
    return _fetch_data(BUILDS_DAY_FILE % date)


def _fetch_data(filename):
    """
    Helper method to fetch the buildjson data we need.

    This function caches the uncompressed gzip files requested in the past.

    Returns all jobs inside of this buildjson file.
    """
    global BUILDS_CACHE
    if filename in BUILDS_CACHE:
        return BUILDS_CACHE[filename]
    url = "%s/%s.gz" % (BUILDJSON_DATA, filename)

    if not os.path.isabs(filename):
        filepath = path_to_file(filename)
    else:
        filepath = filename

    # If the file exists and is valid we won't download it again
    json_contents = load_file(filepath, url)
    BUILDS_CACHE[filename] = json_contents["builds"]
    return json_contents["builds"]


def _find_job(request_id, jobs, loaded_from):
    """
    Look for request_id in a list of jobs.

    loaded_from is simply to indicate where those jobs were loaded from.
    """
    LOG.debug("We are going to look for %s in %s." % (request_id, loaded_from))

    for job in jobs:
        # XXX: Issue 104 - We have an unclear source of request ids
        prop_req_ids = job["properties"].get("request_ids", [])
        root_req_ids = job["request_ids"]
        if request_id in list(set(prop_req_ids + root_req_ids)):
            return job

    return None


def query_job_data(complete_at, request_id):
    """
    Look for a job identified by `request_id` inside of a buildjson
    file under the "builds" entry.

    Through `complete_at`, we can determine on which day we can find the
    metadata about this job.

    WARNING: "request_ids" and the ones from "properties" can differ. Issue filed.

    If found, the returning entry will look like this (only important values
    are referenced):

    .. code-block:: python

        {
            "builder_id": int, # It is a unique identifier of a builder
            "starttime": int,
            "endtime": int,
            "properties": {
                "blobber_files": json, # Mainly applicable to test jobs
                "buildername": string,
                "buildid": string,
                "log_url", string,
                "packageUrl": string, # It only applies for build jobs
                "revision": string,
                "repo_path": string, # e.g. projects/cedar
                "request_ids": list of ints, # Scheduling ID
                "slavename": string, # e.g. t-w864-ix-120
                "symbolsUrl": string, # It only applies for build jobs
                "testsUrl": string,   # It only applies for build jobs
            },
            "request_ids": list of ints, # Scheduling ID
            "requesttime": int,
            "result": int, # Job's exit code
            "slave_id": int, # Unique identifier for the machine that run it
        }

    """
    global BUILDS_CACHE

    assert type(request_id) is int
    assert type(complete_at) is int

    date = utc_day(complete_at)
    LOG.debug("Job identified with complete_at value: %d run on %s UTC." %
              (complete_at, date))

    then = utc_dt(complete_at)
    hours_ago = (utc_dt() - then).total_seconds() / (60 * 60)
    LOG.debug("The job completed at %s (%d hours ago)." %
              (utc_time(complete_at), hours_ago))

    # If it has finished in the last 4 hours
    if hours_ago < 4:
        # We might be able to grab information about pending and running jobs
        # from builds-running.js and builds-pending.js
        filename = BUILDS_4HR_FILE
    else:
        filename = BUILDS_DAY_FILE % date
    job = _find_job(request_id, _fetch_data(filename), filename)

    if job:
        return job

    # If we have not found the job, it might be that our cache for this
    # file is old. We will clean the cache and try one more time. If
    # it fails, we will raise an Exception
    LOG.info("We did not find %d in %s, we'll clear our cache and try again." % (
        request_id, filename))
    del BUILDS_CACHE[filename]

    job = _find_job(request_id, _fetch_data(filename), filename)
    if job:
        return job

    LOG.warning("We have not found the job with request_id %s in %s" %
                (request_id, filename))
    return None
